mutate(
vector_nums = map(vector, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(capability) %>%
mutate(names = paste0("v", 1:n())) %>%
pivot_wider(
id_cols = capability,
names_from = names,
values_from = vector_nums
)
capability_vectors
capability_vectors <- read_csv("results/capability_vectors.csv")
#capability_vectors <-
capability_vectors %>%
mutate(
vector_nums = map(vector, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(capability) %>%
mutate(names = paste0("v", 1:n())) %>%
filter(n() > 300)
capability_vectors %>% filter(capability == "analyze millions of data points")
#capability_vectors <-
capability_vectors %>%
distinct(capability, .keep_all = TRUE) %>%
mutate(
vector_nums = map(vector, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(capability) %>%
mutate(names = paste0("v", 1:n())) %>%
filter(n() > 300)
capability_vectors <- capability_vectors %>%
distinct(capability, .keep_all = TRUE) %>%
mutate(
vector_nums = map(vector, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(capability) %>%
mutate(names = paste0("v", 1:n())) %>%
filter(n() > 300)
capability_vectors <- capability_vectors %>%
distinct(capability, .keep_all = TRUE) %>%
mutate(
vector_nums = map(vector, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(capability) %>%
mutate(names = paste0("v", 1:n())) %>%
pivot_wider(
id_cols = capability,
names_from = names,
values_from = vector_nums
)
capability_vectors
# helpers -----------------------------------------------------------------
elbow_plot <- function(data, k_values) {
wss <- numeric(length(k_values))  # Initialize vector for Within-Cluster-Sum of Squared Errors
for (k in k_values) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
wss[k - 1] <- sum(kmeans_result$withinss)  # Store WSS for each k
}
# Plot the elbow method
plot(
k_values, wss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Within-Cluster-Sum of Squared Errors",
main = "WSS"
)
}
# Function for the Silhouette Method
silhouette_plot <- function(data, k_values) {
silhouette_scores <- numeric(length(k_values))
for (k in k_values) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
silhouette_scores[k - 1] <- silhouette(kmeans_result$cluster, dist(data))$avg.width
}
# Plot silhouette scores
plot(k_values, silhouette_scores, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Average Silhouette Width",
main = "Silhouette Method for K-Means Clustering")
}
# choose k for k-means
elbow_method(capability_vectors, 2:50)
# choose k for k-means
elbow_plot(capability_vectors, 2:50)
# helpers -----------------------------------------------------------------
elbow_plot <- function(data, k_values, k_means_results = NULL) {
wss <- numeric(length(k_values))  # Initialize vector for Within-Cluster-Sum of Squared Errors
for (k in k_values) {
if (is.null(k_means_results)) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
} else {
kmeans_result <- k_means_results[[k - 1]]
}
wss[k - 1] <- sum(kmeans_result$withinss)  # Store WSS for each k
}
# Plot the elbow method
plot(
k_values, wss, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Within-Cluster-Sum of Squared Errors",
main = "WSS"
)
}
# Function for the Silhouette Method
silhouette_plot <- function(data, k_values, k_means_results = NULL) {
silhouette_scores <- numeric(length(k_values))
for (k in k_values) {
if (is.null(k_means_results)) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
} else {
kmeans_result <- k_means_results[[k - 1]]
}
silhouette_scores[k - 1] <- silhouette(kmeans_result$cluster, dist(data))$avg.width
}
# Plot silhouette scores
plot(
k_values, silhouette_scores, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Average Silhouette Width",
main = "Silhouette Width"
)
}
# choose k for k-means
set.seed(5005)
k_values <- 2:50
k_means_list <- list()
for (k in k_values) {
k_means_list[[k - 1]] <- kmeans(
capability_vectors[, -1], centers = k, nstart = 10
)
}
# choose k for k-means
set.seed(5005)
k_values <- 2:50
k_means_list <- list()
tictoc::tic()
for (k in k_values) {
print(k)
k_means_list[[k - 1]] <- kmeans(
capability_vectors[, -1], centers = k, nstart = 10
)
}
tictoc::toc()
warnings()
k_means_list
k_means_list[[5]]
elbow_plot(capability_vectors, 2:50)
elbow_plot(capability_vectors, 2:50, k_means_list)
silhouette_plot(capability_vectors, 2:50, k_means_list)
library(cluster)
silhouette_plot(capability_vectors, 2:50, k_means_list)
silhouette(k_means_list[[1]])
silhouette(k_means_list[[1]]$cluster)
?silhouette
silhouette(k_means_list[[1]]$cluster, dist(capability_vectors[,-1,drop=F]))
# Function for the Silhouette Method
silhouette_plot <- function(
data, k_values, k_means_results = NULL, dist = dist(data)
) {
silhouette_scores <- numeric(length(k_values))
for (k in k_values) {
if (is.null(k_means_results)) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
} else {
kmeans_result <- k_means_results[[k - 1]]
}
silhouette_scores[k - 1] <- silhouette(kmeans_result$cluster, dist)$avg.width
}
# Plot silhouette scores
plot(
k_values, silhouette_scores, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Average Silhouette Width",
main = "Silhouette Width"
)
}
silhouette_plot(
capability_vectors, 2:50, k_means_list,
dist = dist(capabilities_vectors[,-1])
)
silhouette_plot(
capability_vectors, 2:50, k_means_list,
dist = dist(capability_vectors[,-1])
)
dataDist = dist(capability_vectors[,-1])
# Function for the Silhouette Method
silhouette_plot <- function(
data, k_values, k_means_results = NULL, dist = dist(data)
) {
silhouette_scores <- numeric(length(k_values))
for (k in k_values) {
print(k)
if (is.null(k_means_results)) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
} else {
kmeans_result <- k_means_results[[k - 1]]
}
silhouette_scores[k - 1] <- silhouette(kmeans_result$cluster, dist)$avg.width
}
# Plot silhouette scores
plot(
k_values, silhouette_scores, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Average Silhouette Width",
main = "Silhouette Width"
)
}
silhouette_plot(
capability_vectors, 2:50, k_means_list,
dist = dataDist
)
silhouette(k_means_list[[1]]$cluster, dataDist)
silhouette(k_means_list[[1]]$cluster, dataDist)$sil_width
silhouette(k_means_list[[1]]$cluster, dataDist)[,3]
# Function for the Silhouette Method
silhouette_plot <- function(
data, k_values, k_means_results = NULL, dist = dist(data)
) {
silhouette_scores <- numeric(length(k_values))
for (k in k_values) {
print(k)
if (is.null(k_means_results)) {
kmeans_result <- kmeans(data, centers = k, nstart = 10)
} else {
kmeans_result <- k_means_results[[k - 1]]
}
silhouette_scores[k - 1] <- mean(
silhouette(kmeans_result$cluster, dist)[,3] # third column is the silhouette width
)
}
# Plot silhouette scores
plot(
k_values, silhouette_scores, type = "b", pch = 19, frame = FALSE,
xlab = "Number of Clusters (k)", ylab = "Average Silhouette Width",
main = "Silhouette Width"
)
}
silhouette_plot(
capability_vectors, 2:50, k_means_list,
dist = dataDist
)
?silhouette
k_means_result <- k_means_list[[7]] # k = 8 based on elbow plot and silhouette score
# plot low dimensional representation
capability_vectors$cluster <- as.factor(k_means_result$cluster)
capability_vectors %>%
select(-cluster) %>%
prcomp(center = TRUE, scale. = TRUE) %>%
biplot()
capability_vectors %>%
select(-cluster) %>%
prcomp(center = TRUE, scale. = TRUE)
capability_vectors
pca_result <- capability_vectors %>%
select(-c(cluster,capability)) %>%
prcomp(center = TRUE, scale. = TRUE)
pca_result <- capability_vectors %>%
ungroup() %>%
select(-c(cluster,capability)) %>%
prcomp(center = TRUE, scale. = TRUE)
pca_result
pca_result$x[,1:2]
pca_result$x[,1:2] %>%
as_tibble()
# select first 2 principal components
pca_result_df <- pca_result$x[,1:2] %>%
as_tibble() %>%
mutate(cluster = capability_vectors$cluster)
# plot clusters
pca_result_df %>%
ggplot(aes(x = PC1, y = PC2, color = cluster)) +
geom_point() +
theme_minimal() +
labs(title = "Clusters of Capability Vectors")
# select first 2 principal components
pca_result_df <- pca_result$x[,1:3] %>%
as_tibble() %>%
mutate(cluster = capability_vectors$cluster)
# plot 3D
pca_result_df %>%
ggplot(aes(x = PC1, y = PC2, z = PC3, color = cluster)) +
geom_point() +
theme_minimal() +
labs(title = "Clusters of Capability Vectors")
library(plotly)
# plot 3D
plot_ly(data = pca_result_df, x = ~PC1, y = ~PC2, z = ~PC3, color = ~cluster, colors = RColorBrewer::brewer.pal(8, "Set1"), type = "scatter3d", mode = "markers") %>%
layout(title = "3D Clusters of Capability Vectors", scene = list(
xaxis = list(title = "PC1"),
yaxis = list(title = "PC2"),
zaxis = list(title = "PC3")
))
esco_vectors <- read_csv("results/skill_vectors.csv")
esco_vectors
extract_vectors <- function(data, group_col = "capability") {
data %>%
distinct(!!group_col, .keep_all = TRUE) %>%
mutate(
vector_nums = map(vector, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(!!group_col) %>%
mutate(names = paste0("v", 1:n())) %>%
pivot_wider(
id_cols = !!group_col,
names_from = names,
values_from = vector_nums
)
}
# run ---------------------------------------------------------------------
capability_vectors <- read_csv("results/capability_vectors.csv")
capability_vectors <- extract_vectors(capability_vectors, "capability")
capability_vectors
# run ---------------------------------------------------------------------
capability_vectors <- read_csv("results/capability_vectors.csv")
extract_vectors <- function(vector_char) {
map(vector_char, function(vc) {
vc %>%
str_remove_all("\n") %>%
str_remove("\\[") %>%
str_remove("\\]") %>%
trimws() %>%
str_replace_all("\\s+", " ") %>%
str_split(" ") %>%
.[[1]] %>%
as.numeric()
})
}
# run ---------------------------------------------------------------------
capability_vectors <- read_csv("results/capability_vectors.csv")
capability_vectors <- capability_vectors %>%
distinct(capability, .keep_all = TRUE) %>%
mutate(
vector_nums = extract_vectors(vector)
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(capability) %>%
mutate(names = paste0("v", 1:n())) %>%
pivot_wider(
id_cols = capability,
names_from = names,
values_from = vector_nums
)
esco_vectors <- esco_vectors %>%
distinct(skill, .keep_all = TRUE) %>%
mutate(
vector_nums = extract_vectors(vector)
) %>%
select(-vector) %>%
unnest(vector_nums) %>%
group_by(skill) %>%
mutate(names = paste0("v", 1:n())) %>%
pivot_wider(
id_cols = skill,
names_from = names,
values_from = vector_nums
)
esco_vectors
esco_vectors$skill[[1]]
# plot low dimensional representation
capability_vectors$cluster <- as.factor(k_means_result$cluster)
k_means_result$centers %>%
as_tibble() %>%
mutate(cluster = 1:nrow(.))
i = 1
centroids[i, -ncol(centroids)]
# connect centroids to skills ---------------------------------------------
centroids <- k_means_result$centers %>%
as_tibble() %>%
mutate(cluster = 1:nrow(.))
centroids[i, -ncol(centroids)]
as.numeric(centroids[i, -ncol(centroids)])
centroid <- as.numeric(centroids[i, -ncol(centroids)])
map_dbl(
esco_vectors %>% select(-skill),
~ sum(.x * centroid)
)
esco_vectors %>% select(-skill)
map_dbl(
esco_vectors %>% ungroup() %>%select(-skill),
~ sum(.x * centroid)
)
warnings
warnings()
esco_vectors %>% ungroup() %>%select(-skill)
esco_vectors %>% ungroup() %>% select(-skill) %>%
summarise(
dotprod = sum(centroid * .)
)
esco_vectors %>% ungroup() %>% select(-skill) %>%
group_by(1:n())
esco_vectors %>% ungroup() %>% select(-skill) %>%
group_by(1:n()) %>%
summarise(
dotprod = sum(centroid * .)
)
esco_vectors %>% ungroup() %>% select(-skill) %>%
as.matrix()
esco_vectors %>% ungroup() %>% select(-skill) %>%
as.matrix() %>% dim()
dim(centroid)
centroid
as.matrix(centroid)
esco_vectors %>%
ungroup() %>%
select(-skill) %>%
as.matrix() %>%
(function(x) x %*% as.matrix(centroid))
skill_matrix <- esco_vectors %>%
ungroup() %>%
select(-skill) %>%
as.matrix()
dotprods
skill_matrix <- esco_vectors %>%
ungroup() %>%
select(-skill) %>%
as.matrix()
centroid <- as.numeric(centroids[i, -ncol(centroids)])
norm_centroid <- centroid / sqrt(sum(centroid^2))
# calculate dot product between centroid and each skill
dotprods <- skill_matrix %*% as.matrix(centroid)
dotprods / (sqrt(rowSums(skill_matrix^2)) * sqrt(sum(centroid^2)))
(dotprods / (sqrt(rowSums(skill_matrix^2)) * sqrt(sum(centroid^2))) )%>%min()
(dotprods / (sqrt(rowSums(skill_matrix^2)) * sqrt(sum(centroid^2))) )%>%max()
# normalize by skill and centroid
norm_dotprods <- dotprods / (sqrt(rowSums(skill_matrix^2)) * sqrt(sum(centroid^2)))
esco_vectors$skill[order(norm_dotprods, decreasing = TRUE)[1:10]]
skills_by_cluster <- tibble()
n_skills <- 1
for (i in 1:nrow(centroids)) {
centroid <- as.numeric(centroids[i, -ncol(centroids)])
norm_centroid <- centroid / sqrt(sum(centroid^2))
# calculate dot product between centroid and each skill
dotprods <- skill_matrix %*% as.matrix(centroid)
# normalize by skill and centroid
norm_dotprods <- dotprods / (sqrt(rowSums(skill_matrix^2)) * sqrt(sum(centroid^2)))
# get top N skills
skills_by_cluster <- bind_rows(
skills_by_cluster,
tibble(
cluster = centroids$cluster[i],
skill = esco_vectors$skill[order(norm_dotprods, decreasing = TRUE)[1:n_skills]]
)
)
}
View(skills_by_cluster)
skills_by_cluster$skill
