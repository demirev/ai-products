collapse = ", "
)
) %>%
right_join(
scored_occupations,
by = c("esco_uri" = "occupation_uri")
) %>%
select(
everything(),
aioe_felten,
matched_onet_id_from_felten, matched_onet_title_from_felten
)
}
match_from_all <- function(
scored_occupations,
felten_data,
webb_data,
webb_crosswalk,
esco_crosswalk
) {
matched_felten <- scored_occupations %>%
match_from_felten(
felten_data,
esco_crosswalk
) %>%
select(
esco_uri,
felten_exposure_score = aioe_felten,
matched_onet_title_from_felten,
matched_onet_id_from_felten,
)
matched_webb <- scored_occupations %>%
match_from_webb(
webb_data,
webb_crosswalk,
esco_crosswalk
) %>%
select(
esco_uri,
webb_exposure_score = pct_ai_webb,
matched_occ1990dd_title_from_webb,
matched_onet_title_from_webb,
matched_onet_id_from_webb,
)
scored_occupations %>%
left_join(
matched_felten,
by = c("occupation_uri" = "esco_uri")
) %>%
left_join(
matched_webb,
by = c("occupation_uri" = "esco_uri")
)
}
aggregate_webb_to_4digit_onet <- function(
webb_data,
webb_crosswalk
) {
webb_data %>%
inner_join(
webb_crosswalk %>%
select(
occ1990dd,
onet_id = onetsoccode
),
by = c("occ1990dd" = "occ1990dd")
) %>%
mutate(
onet_4digit = substr(onet_id, 1, 5) # e.g. 11-1011.03 to 11-10
) %>%
group_by(
onet_4digit
) %>%
summarise(
webb_exposure_score = mean(pct_ai)
)
}
aggregate_felten_to_4digit_onet <- function(
felten_data
) {
felten_data %>%
mutate(
onet_4digit = substr(soc_code, 1, 5) # e.g. 11-1011.03 to 11-10
) %>%
group_by(
onet_4digit
) %>%
summarise(
felten_exposure_score = mean(aioe)
)
}
aggregate_occupations_to_3digit_isco <- function(
scored_occupations
) {
scored_occupations %>%
mutate(
isco_3digit = substr(isco_group, 1, 3)
) %>%
group_by(
isco_3digit
) %>%
summarise(
ai_product_exposure_score = mean(ai_product_exposure_score)
)
}
aggregate_all_to_3digit_isco <- function(
scored_occupations,
felten_data, webb_data, webb_crosswalk, esco_crosswalk
) {
# get the most common onet_4digit for each isco_3digit
digit3_crosswalk <- esco_crosswalk %>%
left_join(
scored_occupations %>%
select(
occupation_uri,
isco_group
),
by = c("esco_uri" = "occupation_uri")
) %>%
mutate(
onet_4digit = substr(onet_id, 1, 5),
isco_3digit = substr(isco_group, 1, 3)
) %>%
group_by(
isco_3digit
) %>%
summarise(
onet_4digit = onet_4digit %>%
table() %>%
sort(decreasing = TRUE) %>%
names() %>%
.[1]
)
scored_occupations %>%
aggregate_occupations_to_3digit_isco() %>%
left_join(
digit3_crosswalk %>%
select(
isco_3digit,
onet_4digit
),
by = c("isco_3digit" = "isco_3digit")
) %>%
left_join(
aggregate_webb_to_4digit_onet(
webb_data,
webb_crosswalk
),
by = c("onet_4digit" = "onet_4digit")
) %>%
left_join(
aggregate_felten_to_4digit_onet(
felten_data
),
by = c("onet_4digit" = "onet_4digit")
)
}
# read data ---------------------------------------------------------------
args <- parser$parse_args()
webb_data <- read_csv(args$webb_data)
#webb_df <- read_dta("data/webb/final_df_out.dta")
webb_crosswalk <- read_dta(args$webb_crosswalk)
esco_crosswalk <- read_csv(args$esco_crosswalk)
isco_groups <- read_csv(args$isco_groups)
felten_data <- read_csv(args$felten_data)
scored_occupations <- read_csv(args$scored_occupations)
# run ---------------------------------------------------------------------
scored_occupations_matched <- scored_occupations %>%
match_from_all(
felten_data,
webb_data,
webb_crosswalk,
esco_crosswalk
)
scored_groups_matched <- aggregate_all_to_3digit_isco(
scored_occupations_matched,
felten_data, webb_data, webb_crosswalk, esco_crosswalk
) %>%
arrange(desc(ai_product_exposure_score))
scored_groups_matched <- scored_groups_matched %>%
left_join(
isco_groups %>%
select(
code,
group_label = preferredLabel
) %>%
filter(nchar(code) == 3),
by = c("isco_3digit" = "code")
) %>%
select(isco_3digit, group_label, everything())
# ggplot of ai_product_exposure_score vs felten_exposure_score
vs_felten_plot <- scored_groups_matched %>%
ggplot(aes(
x = ai_product_exposure_score,
y = felten_exposure_score
)) +
geom_point() +
geom_smooth(method = "lm") +
labs(
x = "AI Product Exposure Score",
y = "Felten Exposure Score"
) +
# add gray dashed lines at x = 0 and y = 0
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
theme_minimal() +
theme(text = element_text(family = "merriweather"))
vs_felten_plot
ggsave(
file.path(
args$output_dir,
"plots",
"ai_product_exposure_score_vs_felten_exposure_score.png"
),
vs_felten_plot,
width = 9,
height = 5
)
ggsave(
file.path(
args$output_dir,
"plots",
"ai_product_exposure_score_vs_felten_exposure_score.svg"
),
vs_felten_plot,
width = 9,
height = 5
)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(argparse)
library(rnaturalearth)
library(sf)
library(showtext)
library(sysfonts)
# define script arguments -------------------------------------------------
parser <- ArgumentParser()
parser$add_argument(
"--skill_inteligence_data",
type = "character",
help = "Path to data collected from CEDEFOP's Skill Intelligence Report",
default = "data/cedefop/skills_intelligence_data.csv"
)
parser$add_argument(
"--wage_coefficients",
type = "character",
help = "Path to wage premium coefficients collected from the SES 2018 report",
default = "data/ses2018/wage_coefficients.csv"
)
parser$add_argument(
"--scored_occupations",
type = "character",
help = "Path to scored ESCO occupations",
default = "results/occupational_exposure_to_ai_products/scored_esco_occupations_matched.csv"
)
parser$add_argument(
"--output_dir",
type = "character",
help = "Path to output file",
default = "results"
)
font_add_google("Merriweather", "merriweather")
showtext_auto()
# read data ---------------------------------------------------------------
args <- parser$parse_args()
cedefop_data <- read_csv(args$skill_inteligence_data)
ses_coefficients <- read_csv(args$wage_coefficients)
scored_occupations <- read_csv(args$scored_occupations)
# process data ------------------------------------------------------------
scored_occupations_2digit <- scored_occupations %>%
mutate(isco_code = substr(isco_group, 1, 2)) %>%
group_by(isco_code) %>%
summarise(
ai_product_exposure_score = mean(ai_product_exposure_score, na.rm = T),
felten_exposure_score = mean(felten_exposure_score, na.rm = T),
webb_exposure_score = mean(webb_exposure_score, na.rm = T)
)
ses_coefficients <- ses_coefficients %>%
mutate(
mean_wage_coefficient = rowMeans(select(ses_coefficients, -Occupation), na.rm = T),
isco_code = substr(Occupation, nchar(Occupation)-1, nchar(Occupation))
) %>%
select(isco_code, mean_wage_coefficient)
cedefop_data_2digit <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(country == "EU") %>%
select(isco_code, indicator, value) %>%
pivot_wider(names_from = indicator, values_from = value) %>%
select(-relative_income)
exposure_by_country <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(
indicator == "total_employment" & country != "EU"
) %>%
select(
country, isco_code, employment=value
) %>%
mutate(
employment = employment %>%
str_remove_all(",") %>%
as.numeric()
) %>%
left_join(
scored_occupations_2digit %>%
select(
isco_code, ai_product_exposure_score,
felten_exposure_score, webb_exposure_score
),
by = "isco_code"
) %>%
group_by(country) %>%
summarise(
ai_product_exposure_score = weighted.mean(ai_product_exposure_score, employment),
felten_exposure_score = weighted.mean(felten_exposure_score, employment),
webb_exposure_score = weighted.mean(webb_exposure_score, employment)
) %>%
arrange(desc(ai_product_exposure_score)) %>%
print(n = Inf)
scored_occupations_2digit <- scored_occupations_2digit %>%
left_join(ses_coefficients, by = "isco_code") %>%
left_join(cedefop_data_2digit, by = "isco_code") %>%
mutate(
total_employment = total_employment %>%
str_remove_all(",") %>%
as.numeric(),
percent_women = percent_women %>%
str_remove_all("%") %>%
as.numeric(),
percent_unemployed = percent_unemployed %>%
str_remove_all("%") %>%
as.numeric()
)
scored_occupations_2digit %>%
ggplot(aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 3)) +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient") +
theme_minimal() +
theme(text = element_text(family = "merriweather"))
# plot figures ------------------------------------------------------------
vs_wage_plot <- scored_occupations_2digit %>%
ggplot(aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient") +
theme_minimal() +
theme(text = element_text(family = "merriweather"))
vs_wage_plot_cubic_trend <- scored_occupations_2digit %>%
ggplot(aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 3)) +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient") +
theme_minimal() +
theme(text = element_text(family = "merriweather"))
vs_unemployment_plot <- ggplot(scored_occupations_2digit, aes(x = percent_unemployed, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("% Unemployed in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. unemployment rate") +
theme_minimal() +
theme(text = element_text(family = "merriweather"))
vs_unemployment_plot_cubic_trend <- ggplot(scored_occupations_2digit, aes(x = percent_unemployed, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 3)) +
xlab("% Unemployed in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. unemployment rate") +
theme_minimal() +
theme(text = element_text(family = "merriweather"))
vs_unemployment_plot_cubic_trend
expsure_map
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
eu_27 <- c(
"AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR", "HR", "HU", "IE", "IT", "LT", "LU", "LV", "MT",
"NL", "PL", "PT", "RO", "SE", "SI", "SK"
)
gray_countries <- c(
"GB", #"IS",
"NO", "CH", "LI",
"ME", "MK", "AL", "RS", "BA",
"XK", "MD", "UA", "BY"
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
) %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
expsure_map
ne_countries(scale = "medium", returnclass = "sf") %>% arrange((name_en)) %>% select(iso_a2, name_en)
ne_countries(scale = "medium", returnclass = "sf") %>% arrange((name_en)) %>% select(iso_a2, name_en) %>% print(n = Inf)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2),
iso_a2 = if_else(name_en == "Norway", "NO", iso_a2)
) %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
theme(text = element_text(family = "merriweather")) +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
expsure_map
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France" | name_en == "Norway") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2),
iso_a2 = if_else(name_en == "Norway", "NO", iso_a2)
) %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
theme(text = element_text(family = "merriweather")) +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
theme(text = element_text(family = "merriweather")) +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
expsure_map
# save results ------------------------------------------------------------
ggsave(
file.path(args$output_dir, "plots", "exposure_vs_wage_plot.svg"),
vs_wage_plot,
width = 5, height = 5
)
ggsave(
file.path(args$output_dir, "plots", "exposure_vs_unemployment_plot.svg"),
vs_unemployment_plot, width = 5, height = 5
)
ggsave(
file.path(args$output_dir, "plots", "exposure_vs_wage_plot_cubic_trend.svg"),
vs_wage_plot_cubic_trend, width = 5, height = 5
)
ggsave(
file.path(args$output_dir, "plots", "exposure_vs_unemployment_plot_cubic_trend.svg"),
vs_unemployment_plot_cubic_trend, width = 5, height = 5
)
ggsave(
file.path(args$output_dir, "plots", "exposure_map.png"),
expsure_map, width = 5, height = 5
)
ggsave(
file.path(args$output_dir, "plots", "exposure_map.svg"),
expsure_map, width = 5, height = 5
)
ses_coefficients
ses_coefficients$mean_wage_coefficient
