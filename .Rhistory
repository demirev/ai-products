use = "complete.obs"
)
cor(
scored_groups_matched$ai_product_exposure_score,
scored_groups_matched$webb_exposure_score,
use = "complete.obs"
)
cor(
scored_groups_matched$ai_product_exposure_score,
scored_groups_matched$felten_exposure_score,
use = "complete.obs"
)
plot(
scored_groups_matched$ai_product_exposure_score,
scored_groups_matched$felten_exposure_score
)
scored_occupations_plus_webb %>%
filter(
pct_ai > 80 &
exposure_score_mean_of_max_weighted <
quantile(exposure_score_mean_of_max_weighted, 0.2)
) %>%
arrange(desc(pct_ai)) %>%
select(
occupation_title,
exposure_score_mean_of_max_weighted,
pct_ai
) %>%
print(n = Inf)
scored_occupations_plus_webb %>%
filter(
pct_ai < 20 &
exposure_score_mean_of_max_weighted >
quantile(exposure_score_mean_of_max_weighted, 0.8)
) %>%
arrange(desc(exposure_score_mean_of_max_weighted)) %>%
select(
occupation_title,
exposure_score_mean_of_max_weighted,
pct_ai
) %>%
print(n = Inf)
scored_occupations_plus_webb %>%
filter(
pct_ai > 80 &
exposure_score_mean_of_max_weighted >
quantile(exposure_score_mean_of_max_weighted, 0.8)
) %>%
arrange(desc(exposure_score_mean_of_max_weighted)) %>%
select(
occupation_title,
exposure_score_mean_of_max_weighted,
pct_ai
) %>%
print(n = Inf)
scored_occupations_plus_webb %>%
filter(
pct_ai < 20 &
exposure_score_mean_of_max_weighted <
quantile(exposure_score_mean_of_max_weighted, 0.2)
) %>%
arrange(desc(exposure_score_mean_of_max_weighted)) %>%
select(
occupation_title,
exposure_score_mean_of_max_weighted,
pct_ai
) %>%
print(n = Inf)
library(tidyverse)
cedefop_data <- read_csv("data/cedefop/skills_intelligence_data.csv")
ses_coefficients <- read_csv("data/ses2018/wage_coefficients.csv")
scored_occupations <- read_csv("results/scored_esco_occupations_matched.csv")
scored_occupations_2digit <- scored_occupations %>%
mutate(isco_code = substr(isco_group, 1, 2)) %>%
group_by(isco_code) %>%
summarise(
ai_product_exposure_score = mean(ai_product_exposure_score, na.rm = T),
felten_exposure_score = mean(felten_exposure_score, na.rm = T),
webb_exposure_score = mean(webb_exposure_score, na.rm = T)
)
ses_coefficients <- ses_coefficients %>%
mutate(
mean_wage_coefficient = rowMeans(select(ses_coefficients, -Occupation), na.rm = T),
isco_code = substr(Occupation, nchar(Occupation)-1, nchar(Occupation))
) %>%
select(isco_code, mean_wage_coefficient)
cedefop_data_2digit <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(country == "EU") %>%
select(isco_code, indicator, value) %>%
pivot_wider(names_from = indicator, values_from = value) %>%
select(-relative_income)
exposure_by_country <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(
indicator == "total_employment" & country != "EU"
) %>%
select(
country, isco_code, employment=value
) %>%
mutate(
employment = employment %>%
str_remove_all(",") %>%
as.numeric()
) %>%
left_join(
scored_occupations_2digit %>%
select(
isco_code, ai_product_exposure_score,
felten_exposure_score, webb_exposure_score
),
by = "isco_code"
) %>%
group_by(country) %>%
summarise(
ai_product_exposure_score = weighted.mean(ai_product_exposure_score, employment),
felten_exposure_score = weighted.mean(felten_exposure_score, employment),
webb_exposure_score = weighted.mean(webb_exposure_score, employment)
) %>%
arrange(desc(ai_product_exposure_score)) %>%
print(n = Inf)
scored_occupations_2digit <- scored_occupations_2digit %>%
left_join(ses_coefficients, by = "isco_code") %>%
left_join(cedefop_data_2digit, by = "isco_code") %>%
mutate(
total_employment = total_employment %>%
str_remove_all(",") %>%
as.numeric(),
percent_women = percent_women %>%
str_remove_all("%") %>%
as.numeric(),
percent_unemployed = percent_unemployed %>%
str_remove_all("%") %>%
as.numeric()
)
library(ggplot2)
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient")
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = felten_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Mean wage coefficient") +
ylab("Felten exposure score") +
ggtitle("Felten exposure score vs. mean wage coefficient")
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = webb_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Mean wage coefficient") +
ylab("Webb exposure score") +
ggtitle("Webb exposure score vs. mean wage coefficient")
ggplot(scored_occupations_2digit, aes(x = total_employment, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Total employment") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. total employment")
ggplot(scored_occupations_2digit, aes(x = percent_women, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("% Women in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. total employment")
ggplot(scored_occupations_2digit, aes(x = percent_unemployed, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("% Unemployed in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. total employment")
ggplot(scored_occupations_2digit, aes(x = percent_unemployed, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("% Unemployed in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. unemployment rate")
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient")
library(tidyverse)
cedefop_data <- read_csv("data/cedefop/skills_intelligence_data.csv")
ses_coefficients <- read_csv("data/ses2018/wage_coefficients.csv")
scored_occupations <- read_csv("results/scored_esco_occupations_matched.csv")
scored_occupations_2digit <- scored_occupations %>%
mutate(isco_code = substr(isco_group, 1, 2)) %>%
group_by(isco_code) %>%
summarise(
ai_product_exposure_score = mean(ai_product_exposure_score, na.rm = T),
felten_exposure_score = mean(felten_exposure_score, na.rm = T),
webb_exposure_score = mean(webb_exposure_score, na.rm = T)
)
ses_coefficients <- ses_coefficients %>%
mutate(
mean_wage_coefficient = rowMeans(select(ses_coefficients, -Occupation), na.rm = T),
isco_code = substr(Occupation, nchar(Occupation)-1, nchar(Occupation))
) %>%
select(isco_code, mean_wage_coefficient)
cedefop_data_2digit <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(country == "EU") %>%
select(isco_code, indicator, value) %>%
pivot_wider(names_from = indicator, values_from = value) %>%
select(-relative_income)
exposure_by_country <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(
indicator == "total_employment" & country != "EU"
) %>%
select(
country, isco_code, employment=value
) %>%
mutate(
employment = employment %>%
str_remove_all(",") %>%
as.numeric()
) %>%
left_join(
scored_occupations_2digit %>%
select(
isco_code, ai_product_exposure_score,
felten_exposure_score, webb_exposure_score
),
by = "isco_code"
) %>%
group_by(country) %>%
summarise(
ai_product_exposure_score = weighted.mean(ai_product_exposure_score, employment),
felten_exposure_score = weighted.mean(felten_exposure_score, employment),
webb_exposure_score = weighted.mean(webb_exposure_score, employment)
) %>%
arrange(desc(ai_product_exposure_score)) %>%
print(n = Inf)
scored_occupations_2digit <- scored_occupations_2digit %>%
left_join(ses_coefficients, by = "isco_code") %>%
left_join(cedefop_data_2digit, by = "isco_code") %>%
mutate(
total_employment = total_employment %>%
str_remove_all(",") %>%
as.numeric(),
percent_women = percent_women %>%
str_remove_all("%") %>%
as.numeric(),
percent_unemployed = percent_unemployed %>%
str_remove_all("%") %>%
as.numeric()
)
library(ggplot2)
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient")
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient")
install.packages("argparse")
install.packages("argparse")
library(argparse)
library(tidyverse)
library(argparse)
library(tidyverse)
library(argparse)
parser <- ArgumentParser()
parser$add_argument
?ArgumentParser
parser <- ArgumentParser()
parser$add_argument(
"--scored_skills",
type = "character",
help = "Path to scored skills file",
default = "results/scored_esco_skills.csv"
)
parser$add_argument(
"--esco_occupations",
type = "character",
help = "Path to esco occupations file",
default = "data/esco/occupations_en.csv"
)
parser$add_argument(
"--esco_skills",
type = "character",
help = "Path to esco skills file",
default = "data/esco/skills_en.csv"
)
parser$add_argument(
"--esco_occupation_skill_mapping",
type = "character",
help = "Path to esco occupation skill mapping file",
default = "data/esco/occupationSkillRelations_en.csv"
)
parser$add_argument(
"--esco_research_skills",
type = "character",
help = "Path to esco research skills file",
default = "data/esco/researchSkillsCollection_en.csv"
)
args <- parser$parse_args(
c(
"--scored_skills", "results/scored_esco_skills.csv",
"--esco_occupations", "data/esco/occupations_en.csv",
"--esco_skills", "data/esco/skills_en.csv",
"--esco_occupation_skill_mapping", "data/esco/occupationSkillRelations_en.csv",
"--esco_research_skills", "data/esco/researchSkillsCollection_en.csv"
)
)
args
library(tidyverse)
library(argparse)
# define scriot arguments -------------------------------------------------
parser <- ArgumentParser()
parser$add_argument(
"--scored_skills",
type = "character",
help = "Path to scored skills file",
default = "results/scored_esco_skills.csv"
)
parser$add_argument(
"--esco_occupations",
type = "character",
help = "Path to esco occupations file",
default = "data/esco/occupations_en.csv"
)
parser$add_argument(
"--esco_skills",
type = "character",
help = "Path to esco skills file",
default = "data/esco/skills_en.csv"
)
parser$add_argument(
"--esco_occupation_skill_mapping",
type = "character",
help = "Path to esco occupation skill mapping file",
default = "data/esco/occupationSkillRelations_en.csv"
)
parser$add_argument(
"--esco_research_skills",
type = "character",
help = "Path to esco research skills file",
default = "data/esco/researchSkillsCollection_en.csv"
)
# define functions --------------------------------------------------------
aggregate_score_to_occupation_level <- function(
scored_skills,
esco_occupation_skill_mapping,
esco_occupations,
final_measure = "exposure_score_mean_of_max_weighted",
remove_extra = T
) {
res <- esco_occupation_skill_mapping %>%
rename(
occupation_uri = "occupationUri",
skill_uri = "skillUri",
realtion_type = "relationType",
skill_type = "skillType"
) %>%
inner_join(scored_skills, by = c("skill_uri" = "esco_skill_uri")) %>%
inner_join(
esco_occupations %>%
select(
occupation_uri = conceptUri,
isco_group = iscoGroup,
occupation_title = preferredLabel,
alt_titles = altLabels,
description = description,
definition = definition
),
by = c("occupation_uri" = "occupation_uri")
) %>%
select(
occupation_uri,
occupation_title,
isco_group,
alt_titles,
description,
definition,
skill_uri,
skill_label = esco_skill_label,
realtion_type,
#skill_type,
n_similar,
max_similarity,
mean_similarity
) %>%
group_by(
occupation_uri,
occupation_title,
isco_group,
alt_titles,
description,
definition
) %>%
summarise(
n_skills = n(),
exposure_score_n_similar = mean(n_similar),
exposure_score_mean_of_max = mean(max_similarity),
exposure_score_mean_of_mean = mean(mean_similarity),
exposure_score_mean_of_max_essential = mean(
max_similarity[realtion_type == "essential"]
),
exposure_score_mean_of_max_optional = mean(
max_similarity[realtion_type == "optional"]
),
exposure_score_mean_of_max_weighted = weighted.mean(
c(
max_similarity[realtion_type == "essential"],
max_similarity[realtion_type == "optional"]
),
weights = c(
rep(1, sum(realtion_type == "essential")),
rep(0.5, sum(realtion_type == "optional"))
)
)
) %>%
ungroup() %>%
arrange(desc(exposure_score_mean_of_max_weighted))
res$ai_product_exposure_score <- res[[final_measure]]
res <- res %>%
mutate(
ai_product_exposure_score = (
ai_product_exposure_score - mean(ai_product_exposure_score)
) / sd(ai_product_exposure_score), # standardize
ai_product_exposure_percentile = ecdf(ai_product_exposure_score)(
ai_product_exposure_score
) # rank
)
if (remove_extra) {
res <- res %>%
select(
occupation_uri,
occupation_title,
isco_group,
ai_product_exposure_score,
ai_product_exposure_percentile
)
}
return(res)
}
args <- parser$parse_args(
c(
"--scored_skills", "results/scored_esco_skills.csv",
"--esco_occupations", "data/esco/occupations_en.csv",
"--esco_skills", "data/esco/skills_en.csv",
"--esco_occupation_skill_mapping", "data/esco/occupationSkillRelations_en.csv",
"--esco_research_skills", "data/esco/researchSkillsCollection_en.csv"
)
) # for testing
# read data
scored_skills <- read_csv(args$scored_skills)
esco_occupations <- read_csv(args$esco_occupations)
esco_skills <- read_csv(args$esco_skills)
esco_occupation_skill_mapping <- read_csv(
args$esco_occupation_skill_mapping
)
esco_research_skills <- read_csv(
args$esco_research_skills
)
# aggregate occupation scores
scored_occupations <- aggregate_score_to_occupation_level(
scored_skills,
esco_occupation_skill_mapping,
esco_occupations,
final_measure = "exposure_score_mean_of_max_weighted",
remove_extra = T
)
scored_occupations
scored_occupations
scored_occupations$isco_group %>% unique() %>% length()
