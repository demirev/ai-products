# ggplot of ai_product_exposure_score vs felten_exposure_score
vs_felten_plot <- scored_groups_matched %>%
ggplot(aes(
x = ai_product_exposure_score,
y = felten_exposure_score
)) +
geom_point() +
geom_smooth(method = "lm") +
labs(
x = "AI Product Exposure Score",
y = "Felten Exposure Score"
) +
# add gray dashed lines at x = 0 and y = 0
geom_vline(xintercept = 0, linetype = "dashed", color = "gray") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
theme_minimal()
list(
high_felten_low_product_exposure = scored_groups_matched %>%
filter(
felten_exposure_score > 0,
ai_product_exposure_score < 0
) %>%
select(
isco_3digit,
group_label,
ai_product_exposure_score,
felten_exposure_score
) %>%
arrange(desc(felten_exposure_score)),
low_felten_high_product_exposure = scored_groups_matched %>%
filter(
felten_exposure_score < 0,
ai_product_exposure_score > 0
) %>%
select(
isco_3digit,
group_label,
ai_product_exposure_score,
felten_exposure_score
) %>%
arrange(ai_product_exposure_score)
)
# write results -----------------------------------------------------------
write_csv(
scored_occupations_matched,
file.path(
args$output_dir,
"occupational_exposure_to_ai_products",
"scored_esco_occupations_matched.csv"
)
)
ggsave(
file.path(
args$output_dir,
"plots",
"ai_product_exposure_score_vs_felten_exposure_score.png"
),
vs_felten_plot,
width = 8,
height = 6
)
vs_felten_plot
vs_felten_plot
library(tidyverse)
library(ggplot2)
library(argparse)
# define script arguments -------------------------------------------------
parser <- ArgumentParser()
parser$add_argument(
"--skill_inteligence_data",
type = "character",
help = "Path to data collected from CEDEFOP's Skill Intelligence Report",
default = "data/cedefop/skills_intelligence_data.csv"
)
parser$add_argument(
"--wage_coefficients",
type = "character",
help = "Path to wage premium coefficients collected from the SES 2018 report",
default = "data/ses2018/wage_coefficients.csv"
)
parser$add_argument(
"--scored_occupations",
type = "character",
help = "Path to scored ESCO occupations",
default = "results/occupational_exposure_to_ai_products/scored_esco_occupations_matched.csv"
)
parser$add_argument(
"--output_dir",
type = "character",
help = "Path to output file",
default = "results"
)
# read data ---------------------------------------------------------------
args <- parser$parse_args()
cedefop_data <- read_csv(args$skill_inteligence_data)
ses_coefficients <- read_csv(args$wage_coefficients)
scored_occupations <- read_csv(args$scored_occupations)
# process data ------------------------------------------------------------
scored_occupations_2digit <- scored_occupations %>%
mutate(isco_code = substr(isco_group, 1, 2)) %>%
group_by(isco_code) %>%
summarise(
ai_product_exposure_score = mean(ai_product_exposure_score, na.rm = T),
felten_exposure_score = mean(felten_exposure_score, na.rm = T),
webb_exposure_score = mean(webb_exposure_score, na.rm = T)
)
ses_coefficients <- ses_coefficients %>%
mutate(
mean_wage_coefficient = rowMeans(select(ses_coefficients, -Occupation), na.rm = T),
isco_code = substr(Occupation, nchar(Occupation)-1, nchar(Occupation))
) %>%
select(isco_code, mean_wage_coefficient)
cedefop_data_2digit <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(country == "EU") %>%
select(isco_code, indicator, value) %>%
pivot_wider(names_from = indicator, values_from = value) %>%
select(-relative_income)
exposure_by_country <- cedefop_data %>%
mutate(
isco_code = as.character(occupation)
) %>%
filter(
nchar(isco_code) > 1
) %>%
mutate(
isco_code = substr(isco_code, 3, 4),
indicator = str_replace(indicator, " ", "_")
) %>%
filter(
indicator == "total_employment" & country != "EU"
) %>%
select(
country, isco_code, employment=value
) %>%
mutate(
employment = employment %>%
str_remove_all(",") %>%
as.numeric()
) %>%
left_join(
scored_occupations_2digit %>%
select(
isco_code, ai_product_exposure_score,
felten_exposure_score, webb_exposure_score
),
by = "isco_code"
) %>%
group_by(country) %>%
summarise(
ai_product_exposure_score = weighted.mean(ai_product_exposure_score, employment),
felten_exposure_score = weighted.mean(felten_exposure_score, employment),
webb_exposure_score = weighted.mean(webb_exposure_score, employment)
) %>%
arrange(desc(ai_product_exposure_score)) %>%
print(n = Inf)
scored_occupations_2digit <- scored_occupations_2digit %>%
left_join(ses_coefficients, by = "isco_code") %>%
left_join(cedefop_data_2digit, by = "isco_code") %>%
mutate(
total_employment = total_employment %>%
str_remove_all(",") %>%
as.numeric(),
percent_women = percent_women %>%
str_remove_all("%") %>%
as.numeric(),
percent_unemployed = percent_unemployed %>%
str_remove_all("%") %>%
as.numeric()
)
# plot figures ------------------------------------------------------------
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient")
# plot figures ------------------------------------------------------------
vs_wage_plot <- scored_occupations_2digit %>%
ggplot(aes(x = mean_wage_coefficient, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("Mean wage coefficient") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. mean wage coefficient") +
theme_minimal()
vs_wage_plot
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = felten_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Mean wage coefficient") +
ylab("Felten exposure score") +
ggtitle("Felten exposure score vs. mean wage coefficient")
ggplot(scored_occupations_2digit, aes(x = mean_wage_coefficient, y = webb_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Mean wage coefficient") +
ylab("Webb exposure score") +
ggtitle("Webb exposure score vs. mean wage coefficient")
ggplot(scored_occupations_2digit, aes(x = total_employment, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "loess") +
xlab("Total employment") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. total employment")
cor.test(
scored_occupations_2digit$felten_exposure_score,
scored_occupations_2digit$mean_wage_coefficient
)
ggplot(scored_occupations_2digit, aes(x = percent_unemployed, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("% Unemployed in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. unemployment rate")
vs_unemployment_plot <- ggplot(scored_occupations_2digit, aes(x = percent_unemployed, y = ai_product_exposure_score)) +
geom_point() +
geom_smooth(method = "lm") +
xlab("% Unemployed in Occupation") +
ylab("AI product exposure score") +
ggtitle("AI product exposure score vs. unemployment rate")
# save results ------------------------------------------------------------
ggsave(
file.path(args$output_dir, "plots", "exposure_vs_wage_plot.png"),
vs_wage_plot,
width = 10, height = 10
)
ggsave(
file.path(args$output_dir, "plots", "exposure_vs_unemployment_plot.png"),
vs_unemployment_plot, width = 10, height = 10
)
exposure_by_country
# country map of exposure_by_country
exposure_by_country %>%
ggplot(aes(fill = ai_product_exposure_score)) +
geom_map(
map = world_map,
aes(map_id = country),
color = "black"
) +
expand_limits(x = world_map$long, y = world_map$lat) +
scale_fill_viridis_c() +
theme_minimal() +
theme(
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank()
) +
ggtitle("AI Product Exposure Score by Country")
geom_map
?geom_map
exposure_by_country
install.packages("rworldmap")
library(rworldmap)
joinCountryData2Map(
exposure_by_country,
joinCode = "ISO3",
nameJoinColumn = "country"
)
joinCountryData2Map(
exposure_by_country,
joinCode = "ISO2",
nameJoinColumn = "country"
)
# country map of exposure_by_country
europe_map <- joinCountryData2Map(
exposure_by_country,
joinCode = "ISO3",
nameJoinColumn = "country"
)
# Plot the map
ggplot(europe_map, aes(map_id = country)) +
geom_map(aes(fill = ai_product_exposure_score), map = europe_map) +
expand_limits(x = europe_map$LON, y = europe_map$LAT) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
europe_map
# country map of exposure_by_country
europe_map <- joinCountryData2Map(
exposure_by_country,
joinCode = "ISO2",
nameJoinColumn = "country"
)
# Plot the map
ggplot(europe_map, aes(map_id = country)) +
geom_map(aes(fill = ai_product_exposure_score), map = europe_map) +
expand_limits(x = europe_map$LON, y = europe_map$LAT) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
install.packages("rnaturalearth")
library(rnaturalearth)
library(sf)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(region_un == "Europe")
install.packages("rnaturalearthdata")
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(region_un == "Europe")
europe_map <- europe_map %>%
left_join(exposure_data, by = c("iso_a2" = "country"))
europe_map <- europe_map %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
europe_map
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
eu_27 <- c(
"AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR", "HR", "HU", "IE", "IT", "LT", "LU", "LV", "MT",
"NL", "PL", "PT", "RO", "SE", "SI", "SK"
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27)
europe_map <- europe_map %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
exposure_by_country
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27)
europe_map
europe_map$iso_a2
europe_map$iso_a2 %>% sort
ne_countries(scale = "medium", returnclass = "sf")
ne_countries(scale = "medium", returnclass = "sf")$iso_a2 %>% sort
ne_countries(scale = "medium", returnclass = "sf")$name_en %>% sort
ne_countries(scale = "medium", returnclass = "sf") %>% select(name_en, iso_a2)
ne_countries(scale = "medium", returnclass = "sf") %>% select(name_en, iso_a2) %>% as_tibble()
ne_countries(scale = "medium", returnclass = "sf") %>% select(name_en, iso_a2) %>% as_tibble() %>% arrange(name_en) %>% print(n = Inf)
ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | name_en = "France") %>%
ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
)
europe_map <- europe_map %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
gray_countries <- c(
"UK", "IS", "NO", "CH", "LI",
"ME", "MK", "AL", "RS", "BA",
"XK", "MD", "UA", "BY", "RU", "TR", "GE", "AM", "AZ", "AM"
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
)
europe_map <- europe_map %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
gray_countries <- c(
"UK", "IS", "NO", "CH", "LI",
"ME", "MK", "AL", "RS", "BA",
"XK", "MD", "UA", "BY"
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
)
europe_map <- europe_map %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score")
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "red", high = "green", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-25, 45), ylim = c(34, 72))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-25, 45), ylim = c(34, 72))
eu_27 <- c(
"AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR", "HR", "HU", "IE", "IT", "LT", "LU", "LV", "MT",
"NL", "PL", "PT", "RO", "SE", "SI", "SK"
)
gray_countries <- c(
"UK", #"IS",
"NO", "CH", "LI",
"ME", "MK", "AL", "RS", "BA",
"XK", "MD", "UA", "BY"
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
) %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-25, 45), ylim = c(34, 72))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-25, 45), ylim = c(34, 70))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 45), ylim = c(34, 70))
eu_27 <- c(
"AT", "BE", "BG", "CY", "CZ", "DE", "DK", "EE", "ES", "FI",
"FR", "GR", "HR", "HU", "IE", "IT", "LT", "LU", "LV", "MT",
"NL", "PL", "PT", "RO", "SE", "SI", "SK"
)
gray_countries <- c(
"GB", #"IS",
"NO", "CH", "LI",
"ME", "MK", "AL", "RS", "BA",
"XK", "MD", "UA", "BY"
)
europe_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(iso_a2 %in% eu_27 | iso_a2 %in% gray_countries | name_en == "France") %>%
mutate(
iso_a2 = if_else(name_en == "France", "FR", iso_a2)
) %>%
left_join(exposure_by_country, by = c("iso_a2" = "country"))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 45), ylim = c(34, 70))
# Plot the map
ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
# Plot the map
expsure_map <- ggplot(europe_map) +
geom_sf(aes(fill = ai_product_exposure_score)) +
scale_fill_gradient(low = "lightblue", high = "darkblue", na.value = "grey50") +
theme_minimal() +
labs(title = "AI Product Exposure Score by Country in Europe",
fill = "Exposure Score") +
coord_sf(xlim = c(-10, 40), ylim = c(34, 70))
ggsave(
file.path(args$output_dir, "plots", "exposure_map.png"),
expsure_map, width = 10, height = 10
)
